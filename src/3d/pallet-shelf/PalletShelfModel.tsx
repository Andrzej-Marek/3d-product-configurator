/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
Command: npx gltfjsx@6.2.10 shelfgrups.glb -k -t 
*/

import * as THREE from "three";
import { Html, Line, Text, useGLTF } from "@react-three/drei";
import { GLTF } from "three-stdlib";
import { useFrame, useThree } from "@react-three/fiber";
import { PalletShelfMaterial, usePalletShelfStore } from "./pallet-shelf.store";
import { useMemo } from "react";
import { useShelfMaterials } from "./hooks/useShelfMaterials.hook";
import { useCameraAnimation } from "./hooks/useCameraAnimation.hook";

type GLTFResult = GLTF & {
  nodes: {
    Cube014: THREE.Mesh;
    Cube014_1: THREE.Mesh;
    Shelf_wood: THREE.Mesh;
    Cube001: THREE.Mesh;
    Cube001_1: THREE.Mesh;
    Cube015: THREE.Mesh;
    Cube015_1: THREE.Mesh;
    hand_1: THREE.Mesh;
    hand_2: THREE.Mesh;
    Hand_3: THREE.Mesh;
    Hand_4: THREE.Mesh;
  };
  materials: {
    ["Orange Metal"]: THREE.MeshStandardMaterial;
    ["Mesh Metal"]: THREE.MeshStandardMaterial;
    ["Material.001"]: THREE.MeshStandardMaterial;
    ["Blue Metal"]: THREE.MeshStandardMaterial;
    ["Plain Metal"]: THREE.MeshStandardMaterial;
    ["Orange Metal"]: THREE.MeshStandardMaterial;
  };
};
export const PalletShelfModel = (props: JSX.IntrinsicElements["group"]) => {
  const { shelf, depth, height, width, legs, showSizes } =
    usePalletShelfStore();
  useCameraAnimation();

  const { nodes, materials } = useGLTF(
    "/pallet-shelf/palletshelf.glb"
  ) as GLTFResult;

  const xScaleRatio = 0.7 + width.value / 1000;
  const yScaleRatio = 1 + height.value / 1000;
  const zScaleRatio = 0.65 + depth.value / 1000;

  const maxY = 3;
  const minY = 0.229;

  const endY = 2 * yScaleRatio;

  // useFrame(({ camera }) => {
  //   console.log("camera", [...camera.position]);
  // });

  const positions = useMemo(() => {
    const step = maxY / shelf.shelfs.amount;

    let lastNumber = minY;
    const array: number[] = [];

    Array.from({ length: shelf.shelfs.amount }).forEach(() => {
      array.push(lastNumber);
      lastNumber += step;
    });

    return array;
  }, [shelf.shelfs.amount]);

  return (
    <group {...props} dispose={null}>
      <group name="Scene_1" position={[0, -1.389, 0]} scale={0.9}>
        {Array.from({ length: shelf.shelfs.amount }).map((_el, index) => (
          <Shelf
            key={index}
            materials={materials}
            nodes={nodes}
            // position={[0, 0.229 + index / 2, 0]}
            position={[0, positions[index], 0]}
            xScaleRatio={xScaleRatio}
            zScaleRatio={zScaleRatio}
          />
        ))}

        {showSizes && (
          <>
            <Text
              color="black"
              anchorX="center"
              anchorY="middle"
              position={[1.5 * xScaleRatio, endY / 2, 1.1 * zScaleRatio]}
              rotation-z={Math.PI / 2}
              scale={0.2}
            >
              {height.value} cm
            </Text>

            <Text
              color="black"
              anchorX="center"
              anchorY="middle"
              position={[0, 0, 1.1 * zScaleRatio]}
              scale={0.2}
            >
              {width.value} cm
            </Text>

            <Text
              color="black"
              anchorX="center"
              anchorY="middle"
              position={[0, maxY, 0]}
              rotation-y={Math.PI / 2}
              scale={0.2}
            >
              {depth.value} cm
            </Text>
          </>
        )}

        <group
          name="Side1"
          position={[-1.304 * xScaleRatio, 1.514, 0]}
          scale-y={yScaleRatio}
          scale-z={zScaleRatio}
        >
          <mesh
            name="Cube001"
            geometry={nodes.Cube001.geometry}
            material={materials["Blue Metal"]}
            material-color={legs.hexColor}
          />

          <mesh
            name="Cube001_1"
            geometry={nodes.Cube001_1.geometry}
            material={materials["Plain Metal"]}
          />
        </group>
        <group
          name="Side2"
          position={[1.304 * xScaleRatio, 1.514, 0]}
          scale-y={yScaleRatio}
          scale-z={zScaleRatio}
        >
          <mesh
            name="Cube015"
            geometry={nodes.Cube015.geometry}
            material={materials["Blue Metal"]}
          />
          <mesh
            name="Cube015_1"
            geometry={nodes.Cube015_1.geometry}
            material={materials["Plain Metal"]}
          />
        </group>
      </group>
    </group>
  );
};

useGLTF.preload("/pallet-shelf/palletshelf.glb");

const Shelf = ({
  materials,
  nodes,
  xScaleRatio,
  zScaleRatio,
  position,
}: {
  xScaleRatio: number;
  zScaleRatio: number;
  position: [number, number, number];
  nodes: GLTFResult["nodes"];
  materials: GLTFResult["materials"];
}) => {
  const { shelf, frame, accessories } = usePalletShelfStore();
  const { laminate, metal, wood } = useShelfMaterials();

  const shelfMaterial = useMemo(() => {
    const map: Record<PalletShelfMaterial, any> = {
      laminate,
      metal,
      plywood: materials["Material.001"],
      wood,
    };

    return map[shelf.material.current];
  }, [shelf.material]);

  return (
    <>
      <group
        name="Shelf"
        position={position}
        rotation={[0, Math.PI / 2, 0]}
        scale={[1 * zScaleRatio, 1, 2.419 * xScaleRatio]}
      >
        <mesh
          name="Cube014"
          geometry={nodes.Cube014.geometry}
          material={materials["Orange Metal"]}
          material-color={frame.hexColor}
        />
        {accessories.shelfStrengthen.selected && (
          <mesh
            name="Cube014_1"
            geometry={nodes.Cube014_1.geometry}
            material={materials["Mesh Metal"]}
          />
        )}
        <mesh
          name="Shelf_wood"
          geometry={nodes.Shelf_wood.geometry}
          // material={materials["Material.001"]}
          // material={woodMaterial}
          position={[0, 0.036, 0]}
          rotation={[0, -Math.PI / 2, 0]}
          scale={[0.517, 0.019, 0.54]}
        >
          <meshStandardMaterial
            {...shelfMaterial}
            displacementScale={0}
            displacementBias={0}
          />
        </mesh>
      </group>
      <group>
        <mesh
          name="hand_1"
          geometry={nodes.hand_1.geometry}
          material={materials["Orange Metal"]}
          position={[-1.274 * xScaleRatio, position[1], 0.542 * zScaleRatio]}
          rotation={[0, Math.PI / 2, 0]}
          scale={[1, 1, 2.419]}
        />
        <mesh
          name="hand_2"
          geometry={nodes.hand_2.geometry}
          material={materials["Orange Metal"]}
          position={[-1.274 * xScaleRatio, position[1], -0.542 * zScaleRatio]}
          rotation={[0, Math.PI / 2, 0]}
          scale={[1, 1, 2.419]}
        />
      </group>
      <group>
        <mesh
          name="Hand_3"
          geometry={nodes.Hand_3.geometry}
          material={materials["Orange Metal"]}
          position={[1.274 * xScaleRatio, position[1], -0.542 * zScaleRatio]}
          rotation={[0, Math.PI / 2, 0]}
          scale={[1, 1, 2.419]}
        />
        <mesh
          name="Hand_4"
          geometry={nodes.Hand_4.geometry}
          material={materials["Orange Metal"]}
          position={[1.274 * xScaleRatio, position[1], 0.542 * zScaleRatio]}
          rotation={[0, Math.PI / 2, 0]}
          scale={[1, 1, 2.419]}
        />
      </group>
    </>
  );
};
export default PalletShelfModel;
